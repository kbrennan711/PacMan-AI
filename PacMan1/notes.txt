DESIGN REVIEW NOTES

Q function instead of Q  matrix

Feature vectors with weights

This is most similar to the local representation of pacman

Encode it as a list of weights

Share knowledge across very similar states

pybrain

R is a function of the state -- this would include whether pacman had eaten a capsule

Neurogammon Tesauro

# states so large you can't enumerate

How do the berkely people approach the same problem? 

Instead of making actions 1-step things, think about them as being "go toward the pellet" or "go away from ghost"

Continuously updating long-term plan - execute astar 

Higher level - build it as block strategies 
	calculate maximum pellet intake 



Q features
- distance to every ghost
- state of every ghost (scared or not)
- distance to every capsule
- 

R takes in a state and returns... what exactly


What's the task?
Win the game == eat all the pellets


states:
eating pellets
avoiding ghost(s)
chasing ghost(s)
but you could be doing literally all of those at the same time...

everytime you get a pellet it should be a reward; everytime you get a capsule it should be a bigger reward;